# -*- coding: utf-8 -*-
"""YOLO NAS Centroids Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1azxVBWwcOglExLL4yUtvsQWDJp6Rvdki
    
Only use python3.10, no more no less
super-gradeints==3.7.1 Version
"""
import os
from PIL import Image
import numpy as np
import logging
import torch
from super_gradients.training import models

# Remove all Logger notifications
logger = logging.getLogger()
logger.setLevel(logging.CRITICAL)


yolo_nas_l = models.get("yolo_nas_l", pretrained_weights="coco")
# yolo_nas_l = torch.load("C:/Users/Jess/Desktop/School/FYP/cvat/serverless/pytorch/Deci-AI/super-gradients/nuclio/yolo_nas_l.pt")

include_labels = ["car", "bus", "truck", "motorcycle"]

# Change directory to the folder containing the images
ROOT_DIR = "C:/Users/Jess/Desktop/School/FYP/one-day-test-images/testImages"
os.chdir(ROOT_DIR)

def apply_yolo_nas_l(image_path):

  os.chdir(ROOT_DIR + "/" + image_path)

  # List of accepted labels
  accepted_list = [2, 3, 5, 7]  # Example labels that are accepted

  xy_array = []
  # Apply the YOLO-NAS model to each image
  for filename in os.listdir("."):
      if filename.endswith(".jpg") or filename.endswith(".png"):  # Adjust based on your image file types
          image_path = os.path.join(".", filename)
          image = Image.open(image_path)
          filtered_image = yolo_nas_l.predict(image, conf=0.25)
          # print(filtered_image)
          filtered_detections = []
          bboxes = []
          class_names = []
          class_indx = []
          conf = []
          pred = filtered_image.prediction
          labels = pred.labels.astype(int)

          for index, label in enumerate(labels):
              # print(label)
              if label in accepted_list:
                  # print(pred.bboxes_xyxy[index])
                  bboxes.append(pred.bboxes_xyxy[index])
                  class_indx.append(label)
                  conf.append(pred.confidence.astype(float)[index])

          # Update the filtered image with filtered detections
          pred.bboxes_xyxy = np.array(bboxes)

          xy_array.append(pred.bboxes_xyxy)
  return xy_array

def calc_centroids(xy_array):
  centroids_arr = []
  centroids_and_box = []
  for image in xy_array:
    for box in image:
      # 0 - xmin, 1 - ymin, 2 - xmax, 3 - ymax
      xmin, ymin, xmax, ymax = box
      cx = int((xmin + xmax) / 2)
      cy = int((ymin + ymax) / 2)
      centroids_arr.append([cx, cy])
      centroids_and_box.append([[cx, cy] , [xmin, ymin, xmax, ymax]])
  return centroids_arr, centroids_and_box

import pandas as pd

def save_csv(camera_id, file_path, centroids_and_box):
  # Flatten the array and create a DataFrame
  flattened_data = [[cen_x, cen_y, xmin, ymin, xmax, ymax] for [cen_x, cen_y], [xmin, ymin, xmax, ymax] in centroids_and_box]

  # Create the DataFrame with headers
  df = pd.DataFrame(flattened_data, columns=['cen_x', 'cen_y', 'xmin', 'ymin', 'xmax', 'ymax'])

  # Save to CSV
  df.to_csv(file_path + camera_id + ".csv", index=False)


camera_ids = [
              "PAN ISLAND EXPRESSWAY/6710",
              "PAN ISLAND EXPRESSWAY/6711",
              "PAN ISLAND EXPRESSWAY/6712",
              "PAN ISLAND EXPRESSWAY/6713",
              "PAN ISLAND EXPRESSWAY/6714",
              "PAN ISLAND EXPRESSWAY/6715"
              ]

for camera_id in camera_ids:
  xy_array = apply_yolo_nas_l(camera_id)
  centroids_arr, centroids_and_box = calc_centroids(xy_array)
  # save_csv(camera_id, "/content/drive/My Drive/FYP/csv/", centroids_and_box)
  save_csv(camera_id.split("/")[1], "C:/Users/Jess/Desktop/School/FYP/CAM-R/models/experiments/lane_detection/centroidsv2/", centroids_and_box)
  print("Done w/ " + camera_id)
